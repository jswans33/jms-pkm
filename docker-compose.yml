services:
  postgres:
    image: postgres:16-alpine
    container_name: ukp-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-ukp}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - ./storage/postgres:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_HOST_PORT:-55432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal

  redis:
    image: redis:7-alpine
    container_name: ukp-redis
    restart: unless-stopped
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    volumes:
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - ./storage/redis:/data
    ports:
      - "${REDIS_HOST_PORT:-56379}:6379"
    networks:
      - internal

  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      target: runtime
    image: ukp-backend:latest
    container_name: ukp-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - ${ENV_FILE:-.env.development}
    ports:
      - "${BACKEND_HOST_PORT:-4001}:3000"
    networks:
      - internal

  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
      target: runtime
    image: ukp-frontend:latest
    container_name: ukp-frontend
    depends_on:
      - backend
    env_file:
      - ${ENV_FILE:-.env.development}
    ports:
      - "${FRONTEND_HOST_PORT:-4002}:3000"
    networks:
      - internal

  nginx:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    image: ukp-nginx:latest
    container_name: ukp-nginx
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "${NGINX_HOST_PORT:-4080}:80"
    networks:
      - internal
      - public

networks:
  internal:
    driver: bridge
  public:
    driver: bridge

volumes: {}
